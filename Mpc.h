#ifndef _INTERACT_H
#define _INTERACT_H

#define WINAPI __stdcall

#ifdef __cplusplus
extern "C" {
#endif

enum FUNCITEM
{
	GET_MAX_AXE=0,
	GET_BOARD_NUM,
	GET_AXE,
	SET_OUTMODE,
	SET_HOME_MODE,
	SET_MAXSPEED,
	SET_CONSPEED,
	GET_CONSPEED,
	SET_PROFILE,
	GET_PROFILE,
	GET_RATE,
	CON_PMOVE,
	FAST_PMOVE,
	CON_PMOVE2,
	FAST_PMOVE2,
	CON_PMOVE3,
	FAST_PMOVE3,
	CON_PMOVE4,
	FAST_PMOVE4,
	CON_VMOVE,
	FAST_VMOVE,
	CON_VMOVE2,
	FAST_VMOVE2,
	CON_VMOVE3,
	FAST_VMOVE3,
	CON_VMOVE4,
	FAST_VMOVE4,
	CON_HMOVE,
	FAST_HMOVE,
	CON_HMOVE2,
	FAST_HMOVE2,
	CON_HMOVE3,
	FAST_HMOVE3,
	CON_HMOVE4,
	FAST_HMOVE4,
	SET_VECTOR_CONSPEED,
	SET_VECTOR_PROFILE,
	GET_VECTOR_CONSPEED,
	GET_VECTOR_PROFILE,
	CON_LINE2,
	CON_LINE3,
	CON_LINE4,
	FAST_LINE2,
	FAST_LINE3,
	FAST_LINE4,
	CHANGE_POS,
	SET_ABS_POS,
	RESET_POS,
	RESET_CMD_COUNTER,
	SET_GETPOS_MODE,
	SET_ENCODER_MODE,
	SET_DIR,
	ENABLE_SD,
	ENABLE_EL,
	ENABLE_ORG,
//	ENABLE_IO_POS,
	SET_SD_LOGIC,
	SET_EL_LOGIC,
	SET_ORG_LOGIC,
	SET_ALM_LOGIC,
	GET_ABS_POS,
	GET_REL_POS,
	GET_ENCODER,
	GET_CUR_DIR,
	CHECK_STATUS,
	CHECK_DONE,
	CHECK_LIMIT,
	CHECK_HOME,
	CHECK_SD,
	CHECK_ALARM,
	GET_CMD_COUNTER,
	CHECKIN_BYTE,
	CHECKIN_BIT,
	OUTPORT_BIT,
	OUTPORT_BYTE,
	CHECK_SFR,
	SET_BACKLASH,
	START_BACKLASH,
	END_BACKLASH,
	CHANGE_SPEED,
//	CHANGE_ACCEL,
	OUTPORT,
	INPORT,
	SET_RAMP_FLAG,
	ENABLE_IO_POS,
	SET_IO_POS,
	GET_LIB_VER,
	GET_SYS_VER,
	GET_CARD_VER,
};

/////////////////////////////////////////////
/// 使用板卡时调用的第一个函数
/// 功能： 板卡初始化
/// 返回值： 总轴数（正确）--- 负值（错误）
////////////////////////////////////////////
int WINAPI auto_set(void);

/////////////////////////////////////////////
/// 使用板卡时调用的第二个函数
/// 功能： 板卡初始化
/// 返回值： 总卡数（正确）-----  值小于零（错误）
/////////////////////////////////////////////
int WINAPI init_board(void);

/////////////////////////////////////////////
/// 功能：获取总轴数
/// 返回值： 轴数（成功）-----  0（错误）
/////////////////////////////////////////////
int WINAPI get_max_axe(void);

/////////////////////////////////////////////
/// 功能：获取总卡数
/// 返回值： 卡数（成功）-----  0（错误）
/////////////////////////////////////////////
int WINAPI get_board_num();

/////////////////////////////////////////////
/// 功能：获取指定板卡上轴数
/// 参数：
///     cardno ---- 板卡
/// 返回值： 轴数（成功）-----  0（错误）
/////////////////////////////////////////////
int WINAPI get_axe(int board_no);

/////////////////////////////////////////////
/// 功能： 设置脉冲输出模式
/// 参数：
///     ch ----- 轴号
///     mode ---- 模式： 0 （CW/CCW) -- 1 (Pul/Dir)
///     logic ---- 暂不使用
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI set_outmode(int ch,int mode,int logic);

/////////////////////////////////////////////
/// 功能： 设置回零模式
/// 参数：
///     ch ----- 轴号
///     origin_mode ---- 模式
///                 0 ---- ORG 信号有效立即停止
///                 1 ---- ORG信号和编码器 Z 信号同时有效时立即停止
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI set_home_mode(int ch,int origin_mode);

/////////////////////////////////////////////
/// 功能：设置轴最大运行速度
/// 参数：
///     ch ----- 轴号
///     speed ---- 最大速度（正值）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI set_maxspeed(int ch , double speed);

/////////////////////////////////////////////
/// 功能：设置轴常速运行速度
/// 参数：
///     ch ----- 轴号
///     speed ---- 常速速度（正值）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI set_conspeed(int ch , double conspeed);

/////////////////////////////////////////////
/// 功能：获取轴常速点位运动速度
/// 参数：
///     ch ---- 轴号
/// 返回值： 正值速度（成功）-----  -1（错误）
/////////////////////////////////////////////
double WINAPI get_conspeed(int ch);

/////////////////////////////////////////////
/// 功能：设置轴快速运动参数
/// 参数：
///     ch ----- 轴号
///     vl ---- 快速运动低速（正值）
///     vh ---- 快速运动高速（正值）
///     ad ---- 加速度（正值）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI set_profile(int ch , double vl , double vh , double ad);

/////////////////////////////////////////////
/// 功能：获取轴当前快速运动速度
/// 参数：
///     ch ---- 轴号
///     vl ---- 低速
///     vh ---- 高速
///     ad ---- 加速度
/// 返回值： 0（成功）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI get_profile(int ch , double *vl , double *vh , double *ad);

/////////////////////////////////////////////
/// 功能：设置常速插补运动运行速度
/// 参数：
///     speed ---- 常速速度（正值）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI set_vector_conspeed(double conspeed);

/////////////////////////////////////////////
/// 功能：设置快速插补运动参数
/// 参数：
///     vec_vl ---- 快速运动低速（正值）
///     vec_vh ---- 快速运动高速（正值）
///     vec_ad ---- 加速度（正值）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI set_vector_profile(double vec_vl , double vec_vh ,double vec_ad);

/////////////////////////////////////////////
/// 功能：获取轴常速插补运动速度
/// 返回值： 正值速度（成功）-----  -1（错误）
/////////////////////////////////////////////
double WINAPI get_vector_conspeed();

/////////////////////////////////////////////
/// 功能：获取快速插补运动速度
/// 参数：
///     vec_vl ---- 低速
///     vec_vh ---- 高速
///     vec_ad ---- 加速度
/// 返回值： 0（成功）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI get_vector_profile(double *vec_vl , double *vec_vh ,double *vec_ad);

/////////////////////////////////////////////
/// 功能：获取轴运动速度
/// 参数：
///     ch ---- 轴号
/// 返回值： 非负（成功）-----  负值（错误）
/////////////////////////////////////////////
double WINAPI get_rate(int ch);


//int WINAPI get_cardno(long *cardno1,long *cardno2,long *cardno3,long *cardno4);//add by zy 07.03.08


///////////////////////////////////////////////////////////////
//运动指令函数

/////////////////////////////////////////////
/// 功能：单轴常速点位运动指令
/// 参数：
///     ch ---- 轴号
///     step ---- 相对当前位置的位移（正值为正向，负值为负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI con_pmove(int ch,long step);

/////////////////////////////////////////////
/// 功能：单轴快速点位运动指令
/// 参数：
///     ch ---- 轴号
///     step ---- 相对当前位置的位移（正值为正向，负值为负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI fast_pmove(int ch,long step);

/////////////////////////////////////////////
/// 功能：两轴常速点位运动指令
/// 参数：
///     ch1 ---- 轴号
///     step1 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch2 ---- 轴号
///     step2 ---- 相对当前位置的位移（正值为正向，负值为负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI con_pmove2(int ch1,long step1,int ch2,long step2);

/////////////////////////////////////////////
/// 功能：两轴快速点位运动指令
/// 参数：
///     ch1 ---- 轴号
///     step1 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch2 ---- 轴号
///     step2 ---- 相对当前位置的位移（正值为正向，负值为负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI fast_pmove2(int ch1,long step1,int ch2,long step2);

/////////////////////////////////////////////
/// 功能：三轴常速点位运动指令
/// 参数：
///     ch1 ---- 轴号
///     step1 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch2 ---- 轴号
///     step2 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch3 ---- 轴号
///     step3 ---- 相对当前位置的位移（正值为正向，负值为负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI con_pmove3(int ch1,long step1,int ch2,long step2,int ch3,long step3);

/////////////////////////////////////////////
/// 功能：三轴快速点位运动指令
/// 参数：
///     ch1 ---- 轴号
///     step1 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch2 ---- 轴号
///     step2 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch3 ---- 轴号
///     step3 ---- 相对当前位置的位移（正值为正向，负值为负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI fast_pmove3(int ch1,long step1,int ch2,long step2,int ch3,long step3);

/////////////////////////////////////////////
/// 功能：四轴常速点位运动指令
/// 参数：
///     ch1 ---- 轴号
///     step1 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch2 ---- 轴号
///     step2 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch3 ---- 轴号
///     step3 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch4 ---- 轴号
///     step4 ---- 相对当前位置的位移（正值为正向，负值为负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI con_pmove4(int ch1,long step1,int ch2,long step2,int ch3,long step3,int ch4,long step4);

/////////////////////////////////////////////
/// 功能：四轴快速点位运动指令
/// 参数：
///     ch1 ---- 轴号
///     step1 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch2 ---- 轴号
///     step2 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch3 ---- 轴号
///     step3 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch4 ---- 轴号
///     step4 ---- 相对当前位置的位移（正值为正向，负值为负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI fast_pmove4(int ch1,long step1,int ch2,long step2,int ch3,long step3,int ch4,long step4);

/////////////////////////////////////////////
/// 功能：单轴常速连续运动指令
/// 参数：
///     ch ---- 轴号
///     dir ---- 方向（ 1：正向   -1：负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI con_vmove(int ch,int dir);

/////////////////////////////////////////////
/// 功能：单轴快速连续运动指令
/// 参数：
///     ch ---- 轴号
///     dir ---- 方向（ 1：正向   -1：负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI fast_vmove(int ch,int dir);

/////////////////////////////////////////////
/// 功能：两轴常速连续运动指令
/// 参数：
///     ch1 ---- 轴号
///     dir1 ---- 方向（ 1：正向   -1：负向）
///     ch2 ---- 轴号
///     dir2 ---- 方向（ 1：正向   -1：负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI con_vmove2(int ch1,int dir1,int ch2,int dir2);

/////////////////////////////////////////////
/// 功能：两轴快速连续运动指令
/// 参数：
///     ch1 ---- 轴号
///     dir1 ---- 方向（ 1：正向   -1：负向）
///     ch2 ---- 轴号
///     dir2 ---- 方向（ 1：正向   -1：负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI fast_vmove2(int ch1,int dir1,int ch2,int dir2);

/////////////////////////////////////////////
/// 功能：三轴常速连续运动指令
/// 参数：
///     ch1 ---- 轴号
///     dir1 ---- 方向（ 1：正向   -1：负向）
///     ch2 ---- 轴号
///     dir2 ---- 方向（ 1：正向   -1：负向）
///     ch3 ---- 轴号
///     dir3 ---- 方向（ 1：正向   -1：负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI con_vmove3(int ch1,int dir1,int ch2,int dir2,int ch3,int dir3);

/////////////////////////////////////////////
/// 功能：三轴快速连续运动指令
/// 参数：
///     ch1 ---- 轴号
///     dir1 ---- 方向（ 1：正向   -1：负向）
///     ch2 ---- 轴号
///     dir2 ---- 方向（ 1：正向   -1：负向）
///     ch3 ---- 轴号
///     dir3 ---- 方向（ 1：正向   -1：负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI fast_vmove3(int ch1,int dir1,int ch2,int dir2,int ch3,int dir3);

/////////////////////////////////////////////
/// 功能：四轴常速连续运动指令
/// 参数：
///     ch1 ---- 轴号
///     dir1 ---- 方向（ 1：正向   -1：负向）
///     ch2 ---- 轴号
///     dir2 ---- 方向（ 1：正向   -1：负向）
///     ch3 ---- 轴号
///     dir3 ---- 方向（ 1：正向   -1：负向）
///     ch4 ---- 轴号
///     dir4 ---- 方向（ 1：正向   -1：负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI con_vmove4(int ch1,int dir1,int ch2,int dir2,int ch3,int dir3,int ch4,int dir4);

/////////////////////////////////////////////
/// 功能：四轴快速连续运动指令
/// 参数：
///     ch1 ---- 轴号
///     dir1 ---- 方向（ 1：正向   -1：负向）
///     ch2 ---- 轴号
///     dir2 ---- 方向（ 1：正向   -1：负向）
///     ch3 ---- 轴号
///     dir3 ---- 方向（ 1：正向   -1：负向）
///     ch4 ---- 轴号
///     dir4 ---- 方向（ 1：正向   -1：负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI fast_vmove4(int ch1,int dir1,int ch2,int dir2,int ch3,int dir3,int ch4,int dir4);

/////////////////////////////////////////////
/// 功能：单轴常速回零运动指令
/// 参数：
///     ch ---- 轴号
///     dir ---- 方向（ 1：正向   -1：负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI con_hmove(int ch,int dir);

/////////////////////////////////////////////
/// 功能：单轴快速回零运动指令
/// 参数：
///     ch ---- 轴号
///     dir ---- 方向（ 1：正向   -1：负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI fast_hmove(int ch,int dir);

/////////////////////////////////////////////
/// 功能：两轴常速回零运动指令
/// 参数：
///     ch1 ---- 轴号
///     dir1 ---- 方向（ 1：正向   -1：负向）
///     ch2 ---- 轴号
///     dir2 ---- 方向（ 1：正向   -1：负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI con_hmove2(int ch1,int dir1,int ch2,int dir2);

/////////////////////////////////////////////
/// 功能：两轴快速回零运动指令
/// 参数：
///     ch1 ---- 轴号
///     dir1 ---- 方向（ 1：正向   -1：负向）
///     ch2 ---- 轴号
///     dir2 ---- 方向（ 1：正向   -1：负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI fast_hmove2(int ch1,int dir1,int ch2,int dir2);

/////////////////////////////////////////////
/// 功能：三轴常速回零运动指令
/// 参数：
///     ch1 ---- 轴号
///     dir1 ---- 方向（ 1：正向   -1：负向）
///     ch2 ---- 轴号
///     dir2 ---- 方向（ 1：正向   -1：负向）
///     ch3 ---- 轴号
///     dir3 ---- 方向（ 1：正向   -1：负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI con_hmove3(int ch1,int dir1,int ch2,int dir2,int ch3,int dir3);

/// 功能：三轴快速回零运动指令
/// 参数：
///     ch1 ---- 轴号
///     dir1 ---- 方向（ 1：正向   -1：负向）
///     ch2 ---- 轴号
///     dir2 ---- 方向（ 1：正向   -1：负向）
///     ch3 ---- 轴号
///     dir3 ---- 方向（ 1：正向   -1：负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI fast_hmove3(int ch1,int dir1,int ch2,int dir2,int ch3,int dir3);

/////////////////////////////////////////////
/// 功能：四轴常速回零运动指令
/// 参数：
///     ch1 ---- 轴号
///     dir1 ---- 方向（ 1：正向   -1：负向）
///     ch2 ---- 轴号
///     dir2 ---- 方向（ 1：正向   -1：负向）
///     ch3 ---- 轴号
///     dir3 ---- 方向（ 1：正向   -1：负向）
///     ch4 ---- 轴号
///     dir4 ---- 方向（ 1：正向   -1：负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI con_hmove4(int ch1,int dir1,int ch2,int dir2,int ch3,int dir3,int ch4,int dir4);

/////////////////////////////////////////////
/// 功能：四轴快速回零运动指令
/// 参数：
///     ch1 ---- 轴号
///     dir1 ---- 方向（ 1：正向   -1：负向）
///     ch2 ---- 轴号
///     dir2 ---- 方向（ 1：正向   -1：负向）
///     ch3 ---- 轴号
///     dir3 ---- 方向（ 1：正向   -1：负向）
///     ch4 ---- 轴号
///     dir4 ---- 方向（ 1：正向   -1：负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI fast_hmove4(int ch1,int dir1,int ch2,int dir2,int ch3,int dir3,int ch4,int dir4);

/////////////////////////////////////////////
/// 功能：两轴常速直线插补运动指令
/// 参数：
///     ch1 ---- 轴号
///     pos1 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch2 ---- 轴号
///     pos2 ---- 相对当前位置的位移（正值为正向，负值为负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI con_line2(int ch1,long pos1,int ch2, long pos2);

/////////////////////////////////////////////
/// 功能：三轴常速直线插补运动指令
/// 参数：
///     ch1 ---- 轴号
///     pos1 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch2 ---- 轴号
///     pos2 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch3 ---- 轴号
///     pos3 ---- 相对当前位置的位移（正值为正向，负值为负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI con_line3(int ch1,long pos1,int ch2,long pos2,int ch3,long pos3);

/////////////////////////////////////////////
/// 功能：四轴常速直线插补运动指令
/// 参数：
///     ch1 ---- 轴号
///     pos1 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch2 ---- 轴号
///     pos2 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch3 ---- 轴号
///     pos3 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch4 ---- 轴号
///     pos4 ---- 相对当前位置的位移（正值为正向，负值为负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI con_line4(int ch1,long pos1,int ch2,long pos2,int ch3,long pos3,int ch4,long pos4);

/////////////////////////////////////////////
/// 功能：两轴快速直线插补运动指令
/// 参数：
///     ch1 ---- 轴号
///     pos1 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch2 ---- 轴号
///     pos2 ---- 相对当前位置的位移（正值为正向，负值为负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI fast_line2(int ch1,long pos1,int ch2,long pos2);

/////////////////////////////////////////////
/// 功能：三轴快速直线插补运动指令
/// 参数：
///     ch1 ---- 轴号
///     pos1 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch2 ---- 轴号
///     pos2 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch3 ---- 轴号
///     pos3 ---- 相对当前位置的位移（正值为正向，负值为负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI fast_line3(int ch1,long pos1,int ch2,long pos2,int ch3,long pos3);

/////////////////////////////////////////////
/// 功能：四轴快速直线插补运动指令
/// 参数：
///     ch1 ---- 轴号
///     pos1 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch2 ---- 轴号
///     pos2 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch3 ---- 轴号
///     pos3 ---- 相对当前位置的位移（正值为正向，负值为负向）
///     ch4 ---- 轴号
///     pos4 ---- 相对当前位置的位移（正值为正向，负值为负向）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI fast_line4(int ch1,long pos1,int ch2,long pos2,int ch3,long pos3,int ch4,long pos4);

/////////////////////////////////////////////
/// 功能：动态改变目标位置
/// 参数：
///     ch ---- 轴号
///		pos ---- 相对与上条运动指令起始位置的目标位
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI change_pos(int ch, long pos);

///////////////////////////////////////////////////////////////
//制动函数

/////////////////////////////////////////////
/// 功能：单轴急停
/// 参数：
///     ch ---- 轴号
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI sudden_stop(int ch);

/////////////////////////////////////////////
/// 功能：两轴急停
/// 参数：
///     ch1 ---- 轴号
///     ch2 ---- 轴号
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI sudden_stop2(int ch1,int ch2);

/////////////////////////////////////////////
/// 功能：三轴急停
/// 参数：
///     ch1 ---- 轴号
///     ch2 ---- 轴号
///     ch3 ---- 轴号
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI sudden_stop3(int ch1,int ch2,int ch3);

/////////////////////////////////////////////
/// 功能：四轴急停
/// 参数：
///     ch1 ---- 轴号
///     ch2 ---- 轴号
///     ch3 ---- 轴号
///     ch4 ---- 轴号
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI sudden_stop4(int ch1,int ch2,int ch3,int ch4);

/////////////////////////////////////////////
/// 功能：快速运动模式下单轴缓停
/// 参数：
///     ch ---- 轴号
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI decel_stop(int ch);

/////////////////////////////////////////////
/// 功能：快速运动模式下二轴缓停
/// 参数：
///     ch1 ---- 轴号
///     ch2 ---- 轴号
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI decel_stop2(int ch1,int ch2);

/////////////////////////////////////////////
/// 功能：快速运动模式下三轴缓停
/// 参数：
///     ch1 ---- 轴号
///     ch2 ---- 轴号
///     ch3 ---- 轴号
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI decel_stop3(int ch1,int ch2,int ch3);

/////////////////////////////////////////////
/// 功能：快速运动模式下四轴缓停
/// 参数：
///     ch1 ---- 轴号
///     ch2 ---- 轴号
///     ch3 ---- 轴号
///     ch4 ---- 轴号
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI decel_stop4(int ch1,int ch2,int ch3,int ch4);


///////////////////////////////////////////////////////////////
//位置和状态设置函数

/////////////////////////////////////////////
/// 功能：设置轴当前绝对位置
/// 参数：
///     ch ---- 轴号
///     pos ---- 绝对位置值（正值）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI set_abs_pos(int ch,long pos);

/////////////////////////////////////////////
/// 功能：将轴的绝对位置和相对位置清零
/// 参数：
///     ch ---- 轴号
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI reset_pos(int ch);

/////////////////////////////////////////////
/// 功能：对运动指令计数值清零
/// 返回值： 0
/////////////////////////////////////////////
int WINAPI reset_cmd_counter();

/////////////////////////////////////////////
/// 功能：设置get_encoder()获取位置值来源，MPC2810暂不使用该函数
/// 参数：
///     ch ----- 轴号
///     mode ---- 模式： 1(编码器反馈) -- 0 (指令脉冲)
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI set_getpos_mode(int ch,int mode);

/////////////////////////////////////////////
/// 功能：设置编码器模式
/// 参数：
///     ch ----- 轴号
///     mode ---- 信号模式： 1 （增减脉冲) -- 0 (A/B 90度相位差)
///     multip --- 倍频数：1或4
///     count_unit --- 暂不使用，设置为 0
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI set_encoder_mode(long ch,long mode,long multip,long count_unit);

/////////////////////////////////////////////
/// 功能： 设置方向信号的电平
/// 参数：
///     ch ----- 轴号
///     dir ---- 方向： 1 （正向) -- -1 (负向)
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI set_dir(int ch,int dir);

/////////////////////////////////////////////
/// 功能： 使能轴 SD 信号
/// 参数：
///     ch ----- 轴号
///     flag ---- 使能标志： 1 （使能) -- 0 (不使能)
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI enable_sd(int ch,int flag);

/////////////////////////////////////////////
/// 功能： 使能轴限位信号
/// 参数：
///     ch ----- 轴号
///     flag ---- 使能标志： 1 （使能) -- 0 (不使能)
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI enable_el(int ch,int flag);

/////////////////////////////////////////////
/// 功能： 使能轴 ORG 信号
/// 参数：
///     ch ----- 轴号
///     flag ---- 使能标志： 1 （使能) -- 0 (不使能)
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI enable_org(int ch,int flag);

/////////////////////////////////////////////
/// 功能：设置轴 SD 信号有效电平
/// 参数：
///     ch ----- 轴号
///     flag ---- 有效电平： 1 （高电平) -- 0 (低电平)
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI set_sd_logic(int ch,int flag);

/////////////////////////////////////////////
/// 功能：设置轴限位信号有效电平
/// 参数：
///     ch ----- 轴号
///     flag ---- 有效电平： 1 （高电平) -- 0 (低电平)
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI set_el_logic(int ch,int flag);

/////////////////////////////////////////////
/// 功能：设置轴 ORG 信号有效电平
/// 参数：
///     ch ----- 轴号
///     flag ---- 有效电平： 1 （高电平) -- 0 (低电平)
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI set_org_logic(int ch,int flag);

/////////////////////////////////////////////
/// 功能：设置轴报警信号有效电平
/// 参数：
///     ch ----- 轴号
///     flag ---- 有效电平： 1 （高电平) -- 0 (低电平)
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI set_alm_logic(int ch,int flag);

/////////////////////////////////////////////
/// 功能：获取轴绝对位置值
/// 参数：
///     ch ---- 轴号
///     pos ---- 绝对位置
/// 返回值： 0（成功）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI get_abs_pos(int ch,long *pos);

/////////////////////////////////////////////
/// 功能：获取轴相对位置值
/// 参数：
///     ch ---- 轴号
///     pos ---- 相对于当前运动指令起始点的位置值
/// 返回值： 0（成功）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI get_rel_pos(int ch,long *pos);

/////////////////////////////////////////////
/// 功能：获取编码器反馈位置
/// 参数：
///     ch ---- 轴号
///     count ---- 保存编码器位置值
/// 返回值： 0（成功）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI get_encoder(int ch,long *count);

/////////////////////////////////////////////
/// 功能：获取轴当前方向
/// 参数：
///     ch ---- 轴号
/// 返回值： 0（停止状态） -1（负向） 1（正向） -2（出错）
/////////////////////////////////////////////
int WINAPI get_cur_dir(int ch);


///////////////////////////////////////////////////////////////
//状态查询函数

/////////////////////////////////////////////
/// 功能：获取轴当前状态（ORG、EL、ALM等有效状态）
/// 参数：
///     ch ---- 轴号
/// 返回值： 正值（成功）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI check_status(int ch);


/////////////////////////////////////////////
/// 功能：获取轴当前运动状态
/// 参数：
///     ch ---- 轴号
/// 返回值： 0（停止）-----  1（运动）---- -1（出错）
/////////////////////////////////////////////
int WINAPI check_done(int ch);

/////////////////////////////////////////////
/// 功能：获取轴当前限位信号状态
/// 参数：
///     ch ---- 轴号
/// 返回值： 0（无效）-----  1（正限位有效）---- -1（负限位有效）---- （正负限位有效）---- -3（出错）
/////////////////////////////////////////////
int WINAPI check_limit(int ch);

/////////////////////////////////////////////
/// 功能：获取轴当前原点信号状态
/// 参数：
///     ch ---- 轴号
/// 返回值： 0（无效）-----  1（有效）---- -3（出错）
/////////////////////////////////////////////
int WINAPI check_home(int ch);

/////////////////////////////////////////////
/// 功能：获取轴当前减速信号状态
/// 参数：
///     ch ---- 轴号
/// 返回值： 0（无效）-----  1（有效）---- -3（出错）
/////////////////////////////////////////////
int WINAPI check_SD(int ch);

/////////////////////////////////////////////
/// 功能：获取轴当前报警信号状态
/// 参数：
///     ch ---- 轴号
/// 返回值： 0（无效）-----  1（有效）---- -3（出错）
/////////////////////////////////////////////
int WINAPI check_alarm(int ch);

/////////////////////////////////////////////
/// 功能：获取当前批处理和速度前瞻运动正在执行的运动指令计数
/// 返回值： 指令计数
/////////////////////////////////////////////
int WINAPI get_cmd_counter();



/////////////////////////////////////////////
/// 功能：读取所有通用输入口状态
/// 参数：
///     cardno ---- 卡号
/// 返回值： 非负（通用输入口状态）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI checkin_byte(int cardno);

/////////////////////////////////////////////
/// 功能：读取某位通用输入口状态
/// 参数：
///     cardno ---- 卡号
///     bitno ---- 通用输入口位标记
/// 返回值： 1（高电平）---- 0（低电平）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI checkin_bit(int cardno,int bitno);

/////////////////////////////////////////////
/// 功能：设置某位通用输出口状态
/// 参数：
///     cardno ---- 卡号
///     bitno ---- 通用输出口位标记
///     status ---- 通用输出口状态： 0（低电平） 1（高电平）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI outport_bit(int cardno,int bitno,int status);

/////////////////////////////////////////////
/// 功能：设置所有通用输出口状态
/// 参数：
///     cardno ---- 卡号
///     data ---- 通用输出口状态
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI outport_byte(int cardno,int bytedata);

/////////////////////////////////////////////
/// 功能：读取所有专用输入口状态（ORG、EL、SD、Z信号和板卡ALARM信号）
/// 参数：
///     cardno ---- 卡号
/// 返回值： 所有专用输入口信号电平状态
/////////////////////////////////////////////
int WINAPI check_SFR(int cardno);


///////////////////////////////////////////////////////////////
//其它函数

/////////////////////////////////////////////
/// 功能：设置反向间隙补偿值
/// 参数：
///     axis ---- 轴号
///     blash ---- 补偿值
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI set_backlash(int axis,int blash);

/////////////////////////////////////////////
/// 功能：开启反向间隙补偿功能
/// 参数：
///     axis ---- 轴号
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI start_backlash(int axis);

/////////////////////////////////////////////
/// 功能：结束反向间隙补偿功能
/// 参数：
///     axis ---- 轴号
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI end_backlash(int axis);

/////////////////////////////////////////////
/// 功能：运动中变速
/// 参数：
///     ch ---- 轴号
///     speed ---- 目标速度
/// 返回值： 0（正确） -1（错误）
//////////////////////////////////////////
int WINAPI change_speed(int ch,double speed);

/////////////////////////////////////////////
/// 功能：运动中改变加速度
/// 参数：
///     ch ---- 轴号
///     accel ---- 目标加速度
/// 返回值： 0（正确） -1（错误）
//////////////////////////////////////////
int WINAPI change_accel(int ch,double accel);

/////////////////////////////////////////////
/// 功能：对PC端指定地址进行写操作
/// 参数：
///     portid --- 地址
///     data ---- 写入数据
/// 返回值： -1（错误）---- 0（正确）
/////////////////////////////////////////////
int WINAPI Outport(int portid,unsigned char data); 

/////////////////////////////////////////////
/// 功能：对PC端指定地址进行读操作
/// 参数：
///     portid --- 地址
/// 返回值： 读入的数据
/////////////////////////////////////////////
int WINAPI Inport(int portid);

/////////////////////////////////////////////
/// 功能：对多条指令连续执行时进行特殊升降速处理
/// 参数：
///     flag --- 运动升降速标志，1 或是 2
/// 返回值： -1（错误）---- 0（正确）
/////////////////////////////////////////////
int WINAPI set_ramp_flag(int flag);

/////////////////////////////////////////////
/// 功能：获取函数库版本
/// 参数：
///     major ---- 主版本号
///     minor1 ---- 一级版本号
///     minor2 ---- 二级版本号
/// 返回值： 0（无效）-----  -1（参数错误）
/////////////////////////////////////////////
int WINAPI get_lib_ver(long* major,long *minor1,long *minor2);

/////////////////////////////////////////////
/// 功能：获取驱动程序版本
/// 参数：
///     major ---- 主版本号
///     minor1 ---- 一级版本号
///     minor2 ---- 二级版本号
/// 返回值： 0（无效）-----  -1（参数错误）
/////////////////////////////////////////////
int WINAPI get_sys_ver(long* major,long *minor1,long *minor2);

/////////////////////////////////////////////
/// 功能：获取板卡版本
/// 参数：
///     cardno ---- 板卡
///     type ---- 板卡类型
///     major ---- 主版本号
///     minor1 ---- 一级版本号
///     minor2 ---- 二级版本号
/// 返回值： 0（无效）-----  -1（参数错误）
/////////////////////////////////////////////
int WINAPI get_card_ver(long cardno,long *type,long* major,long *minor1,long *minor2);

/////////////////////////////////////////////
/// 功能：使能位置比较输出
/// 参数：
///     cardno ---- 轴号
///     flag ---- 使能标志：0（不使能）  1（不使能）
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI enable_io_pos(int cardno,int flag);//flag--1,有效;flag--0,无效

/////////////////////////////////////////////
/// 功能：设置位置比较输出起始和终点位置
/// 参数：
///     ch ---- 轴号
///     open_pos ---- 起始位置
///     close_pos ---- 终点位置
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI set_io_pos(int ch,int open_pos,int close_pos);

/////////////////////////////////////////////
/// 功能：获取指定板卡本地ID号
/// 参数：
///     cardno ---- 板卡
/// 返回值： 1~总卡数（成功）-----  其他（错误）
/////////////////////////////////////////////
int WINAPI check_IC(int no);

/////////////////////////////////////////////
/// 功能：获取最近一次错误代码
/// 返回值： 0（没有错误）-----  正数（正确）
/////////////////////////////////////////////
int WINAPI get_last_err();

/////////////////////////////////////////////
/// 功能：获取错误代码
/// 参数：
///     index ---- 错误索引：1~10
///     data ---- 存储错误代码
/// 返回值： 0（正确）-----  -1（index错误或系统没有错误）
/////////////////////////////////////////////
int WINAPI get_err(int index,int *data);

/////////////////////////////////////////////
/// 功能：清除最近10次错误代码
/// 返回值： 0（正确）-----  -1（错误）
/////////////////////////////////////////////
int WINAPI reset_err();


#ifdef __cplusplus
}
#endif

#endif
